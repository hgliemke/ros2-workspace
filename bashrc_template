# Putin robot aliases


# ============================================
# Teleop and Joystick Control Aliases
# ============================================

# Robot control script
alias putin_start='~/ros2/scripts/putin_control.sh'
alias putin='~/ros2/scripts/putin_control.sh'

# Xbox controller teleop (with your custom configs)
alias xbox_teleop='ros2 launch teleop_twist_joy teleop-launch.py joy_config:=xbox'
alias xbox_correct='ros2 launch teleop_twist_joy teleop-launch.py config_filepath:=~/ros2/configs/xbox_correct_config.yaml'
alias xbox_fixed='ros2 launch teleop_twist_joy teleop-launch.py config_filepath:=~/ros2/configs/xbox_teleop_fixed.yaml'

# Manual joystick + teleop (if launch doesn't work)
alias joy_start='ros2 run joy joy_node'
alias teleop_joy='ros2 run teleop_twist_joy teleop_node --ros-args --params-file ~/ros2/configs/xbox_correct_config.yaml -r /cmd_vel:=/putin/cmd_vel'

# Keyboard teleop
alias teleop_kbd='ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/putin/cmd_vel'
alias putin_kbd='ros2 run teleop_twist_keyboard teleop_twist_keyboard --ros-args -r /cmd_vel:=/putin/cmd_vel'

# Test joystick connection
alias joy_test='ros2 run joy joy_node --ros-args -p device_id:=0'
alias joy_list='ls /dev/input/js*'
alias joy_echo='ros2 topic echo /joy'

# Emergency stop
alias estop='ros2 topic pub -1 /putin/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}"'
alias stop='ros2 topic pub -1 /putin/cmd_vel geometry_msgs/msg/Twist "{linear: {x: 0.0, y: 0.0, z: 0.0}, angular: {x: 0.0, y: 0.0, z: 0.0}}"'

# Monitor Putin robot
alias putin_topics='ros2 topic list | grep putin'
alias putin_battery='ros2 topic echo /putin/battery_state'
alias putin_odom='ros2 topic echo /putin/odom'
alias putin_status='ros2 topic echo /putin/battery_state & ros2 topic echo /putin/odom'
# ============================================
# ROS2 Environment Setup
# ============================================

# ROS2 Distribution (change if using different distro)
source /opt/ros/jazzy/setup.bash

# Workspace overlays (in dependency order)
# Base communication layer
if [ -f "$HOME/ros2/workspaces/base/install/setup.bash" ]; then
    source "$HOME/ros2/workspaces/base/install/setup.bash"
fi

# Robot workspaces
if [ -f "$HOME/ros2/workspaces/create3/install/setup.bash" ]; then
    source "$HOME/ros2/workspaces/create3/install/setup.bash"
fi

if [ -f "$HOME/ros2/workspaces/turtlebot3/install/setup.bash" ]; then
    source "$HOME/ros2/workspaces/turtlebot3/install/setup.bash"
fi

# Peripheral systems
if [ -f "$HOME/ros2/workspaces/sensors/install/setup.bash" ]; then
    source "$HOME/ros2/workspaces/sensors/install/setup.bash"
fi

if [ -f "$HOME/ros2/workspaces/control/install/setup.bash" ]; then
    source "$HOME/ros2/workspaces/control/install/setup.bash"
fi

# Add scripts to PATH
export PATH="$HOME/ros2/scripts:$PATH"
# ROS2 Aliases
alias ros2ws='cd ~/ros2/workspaces'
alias ros2build='cd ~/ros2/workspaces && ./build_all.sh'
alias ros2create3='cd ~/ros2/workspaces/create3'
alias ros2turtle='cd ~/ros2/workspaces/turtlebot3'
alias ros2clean='rm -rf ~/ros2/workspaces/*/build ~/ros2/workspaces/*/install ~/ros2/workspaces/*/log'

# Colcon build optimization
export COLCON_DEFAULTS_FILE=~/ros2/.colcon-defaults.yaml

# Optional: Set default ROS_DOMAIN_ID if needed
# export ROS_DOMAIN_ID=42
